version: '3.8'

services:
  # SightEdit Production Server
  sightedit-server:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: sightedit-production
    restart: unless-stopped
    ports:
      - "443:3000"  # HTTPS port
    environment:
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: sightedit_production
      DB_USER: sightedit
      DB_PASSWORD_FILE: /run/secrets/db_password
      
      # JWT Secrets (use Docker secrets in production)
      JWT_ACCESS_SECRET_FILE: /run/secrets/jwt_access_secret
      JWT_REFRESH_SECRET_FILE: /run/secrets/jwt_refresh_secret
      CSRF_SECRET_FILE: /run/secrets/csrf_secret
      
      # HTTPS Configuration
      HTTPS_CERT_PATH: /certs/cert.pem
      HTTPS_KEY_PATH: /certs/key.pem
      
      # Email Configuration
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_SECURE: ${SMTP_SECURE:-false}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD_FILE: /run/secrets/smtp_password
      SMTP_FROM: ${SMTP_FROM}
      
      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS}
      
      # External Services
      ANALYTICS_ENDPOINT: ${ANALYTICS_ENDPOINT}
      ANALYTICS_API_KEY_FILE: /run/secrets/analytics_api_key
      MONITORING_WEBHOOK: ${MONITORING_WEBHOOK}
      
      # File Upload Configuration
      UPLOAD_PATH: /var/lib/sightedit/uploads
      
      # Logging
      LOG_FILE: /var/log/sightedit/app.log
    
    volumes:
      # SSL certificates
      - ./certs:/certs:ro
      # File uploads (persistent)
      - sightedit_uploads:/var/lib/sightedit/uploads
      # Logs
      - sightedit_logs:/var/log/sightedit
      # Temporary files
      - /tmp/sightedit:/tmp/sightedit
    
    secrets:
      - db_password
      - jwt_access_secret
      - jwt_refresh_secret
      - csrf_secret
      - smtp_password
      - analytics_api_key
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - sightedit_backend
      - sightedit_frontend
    
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Security constraints
    user: "1001:1001"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        max_attempts: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sightedit-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: sightedit_production
      POSTGRES_USER: sightedit
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    secrets:
      - db_password
    networks:
      - sightedit_backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sightedit -d sightedit_production"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    # Security
    user: postgres
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis for Caching and Session Store
  redis:
    image: redis:7-alpine
    container_name: sightedit-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    volumes:
      - redis_data:/data
    secrets:
      - redis_password
    networks:
      - sightedit_backend
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # NGINX Reverse Proxy (optional - for load balancing)
  nginx:
    image: nginx:alpine
    container_name: sightedit-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/certs:ro
    depends_on:
      - sightedit-server
    networks:
      - sightedit_frontend
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sightedit-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - sightedit_backend

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sightedit-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
    secrets:
      - grafana_password
    networks:
      - sightedit_backend

# Docker Secrets (use external secrets in production)
secrets:
  db_password:
    external: true
  jwt_access_secret:
    external: true
  jwt_refresh_secret:
    external: true
  csrf_secret:
    external: true
  smtp_password:
    external: true
  analytics_api_key:
    external: true
  redis_password:
    external: true
  grafana_password:
    external: true

# Persistent Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  sightedit_uploads:
    driver: local
  sightedit_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  sightedit_backend:
    driver: bridge
    internal: true
  sightedit_frontend:
    driver: bridge