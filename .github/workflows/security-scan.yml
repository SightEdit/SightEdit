name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Mondays at 6 AM UTC
  workflow_dispatch:

env:
  NODE_VERSION: '18'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          
      - name: Generate npm audit report
        run: |
          echo "## NPM Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f npm-audit-report.json ]; then
            VULNERABILITIES=$(cat npm-audit-report.json | jq -r '.metadata.vulnerabilities // {}')
            TOTAL=$(echo $VULNERABILITIES | jq -r 'to_entries | map(.value) | add // 0')
            
            echo "**Total Vulnerabilities**: $TOTAL" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$TOTAL" -gt 0 ]; then
              echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
              echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| Critical | $(echo $VULNERABILITIES | jq -r '.critical // 0') |" >> $GITHUB_STEP_SUMMARY
              echo "| High     | $(echo $VULNERABILITIES | jq -r '.high // 0') |" >> $GITHUB_STEP_SUMMARY
              echo "| Moderate | $(echo $VULNERABILITIES | jq -r '.moderate // 0') |" >> $GITHUB_STEP_SUMMARY
              echo "| Low      | $(echo $VULNERABILITIES | jq -r '.low // 0') |" >> $GITHUB_STEP_SUMMARY
              echo "| Info     | $(echo $VULNERABILITIES | jq -r '.info // 0') |" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-report
          path: npm-audit-report.json
          retention-days: 30

  snyk-security-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    if: vars.SNYK_TOKEN
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ vars.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-report.json
          
      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif
          
      - name: Upload Snyk report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-report
          path: |
            snyk-report.json
            snyk.sarif
          retention-days: 30

  semgrep-sast:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Semgrep
        id: semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/docker
          generateSarif: "1"
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          
      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: semgrep.sarif
          retention-days: 30

  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [backend-server, cdn-server, website]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        run: |
          docker build -f Dockerfile.production --target ${{ matrix.target }} -t sightedit:${{ matrix.target }}-scan .
          
      - name: Run comprehensive container security scan
        run: |
          chmod +x docker/security/container-scan.sh
          SCANNERS=trivy,grype OUTPUT_FORMAT=json,sarif,html EXIT_CODE=0 \
            ./docker/security/container-scan.sh sightedit:${{ matrix.target }}-scan
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'sightedit:${{ matrix.target }}-scan'
          format: 'sarif'
          output: 'trivy-${{ matrix.target }}-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Run Trivy for JSON output
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'sightedit:${{ matrix.target }}-scan'
          format: 'json'
          output: 'trivy-${{ matrix.target }}-results.json'
          
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          
      - name: Run Grype vulnerability scanner
        run: |
          grype sightedit:${{ matrix.target }}-scan \
            --output json \
            --file grype-${{ matrix.target }}-results.json
          grype sightedit:${{ matrix.target }}-scan \
            --output sarif \
            --file grype-${{ matrix.target }}-results.sarif || true
            
      - name: Install Container Structure Test
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          
      - name: Create structure test configuration
        run: |
          cat > structure-test-${{ matrix.target }}.yaml << 'EOF'
          schemaVersion: '2.0.0'
          
          fileExistenceTests:
          - name: 'Check application directory exists'
            path: '/app'
            shouldExist: true
            isDirectory: true
          - name: 'Check no package managers in production'
            path: '/usr/bin/apk'
            shouldExist: false
          - name: 'Check no root shell access'
            path: '/bin/su'
            shouldExist: false
            
          fileContentTests:
          - name: 'Check non-root user configuration'
            path: '/etc/passwd'
            expectedContents: ['.*:x:1001:1001:.*']
            
          commandTests:
          - name: 'Verify running as non-root user'
            command: 'id'
            args: ['-u']
            expectedOutput: ['1001']
            
          metadataTest:
            user: "1001"
            workdir: "/app"
          EOF
          
      - name: Run Container Structure Test
        run: |
          container-structure-test test \
            --image sightedit:${{ matrix.target }}-scan \
            --config structure-test-${{ matrix.target }}.yaml \
            --output json > structure-test-${{ matrix.target }}-results.json || true
            
      - name: Run Docker Bench Security
        run: |
          docker run --rm \
            --net host \
            --pid host \
            --userns host \
            --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=1 \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            --label docker_bench_security \
            docker/docker-bench-security > docker-bench-${{ matrix.target }}.log 2>&1 || true
            
      - name: Generate vulnerability summary
        run: |
          # Parse Trivy results
          if [ -f "trivy-${{ matrix.target }}-results.json" ]; then
            TRIVY_CRITICAL=$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL") | .VulnerabilityID' trivy-${{ matrix.target }}-results.json 2>/dev/null | wc -l || echo 0)
            TRIVY_HIGH=$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH") | .VulnerabilityID' trivy-${{ matrix.target }}-results.json 2>/dev/null | wc -l || echo 0)
            echo "TRIVY_CRITICAL=$TRIVY_CRITICAL" >> $GITHUB_ENV
            echo "TRIVY_HIGH=$TRIVY_HIGH" >> $GITHUB_ENV
          fi
          
          # Parse Grype results
          if [ -f "grype-${{ matrix.target }}-results.json" ]; then
            GRYPE_CRITICAL=$(jq -r '.matches[]? | select(.vulnerability.severity=="Critical") | .vulnerability.id' grype-${{ matrix.target }}-results.json 2>/dev/null | wc -l || echo 0)
            GRYPE_HIGH=$(jq -r '.matches[]? | select(.vulnerability.severity=="High") | .vulnerability.id' grype-${{ matrix.target }}-results.json 2>/dev/null | wc -l || echo 0)
            echo "GRYPE_CRITICAL=$GRYPE_CRITICAL" >> $GITHUB_ENV
            echo "GRYPE_HIGH=$GRYPE_HIGH" >> $GITHUB_ENV
          fi
          
      - name: Check security gates
        run: |
          TOTAL_CRITICAL=$((TRIVY_CRITICAL + GRYPE_CRITICAL))
          TOTAL_HIGH=$((TRIVY_HIGH + GRYPE_HIGH))
          
          echo "Security Summary for ${{ matrix.target }}:"
          echo "Critical vulnerabilities: $TOTAL_CRITICAL"
          echo "High vulnerabilities: $TOTAL_HIGH"
          
          # Set output for later jobs
          echo "total_critical=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
          echo "total_high=$TOTAL_HIGH" >> $GITHUB_OUTPUT
          
          # Fail build on critical vulnerabilities in production images
          if [[ "${{ github.ref }}" == "refs/heads/main" && "$TOTAL_CRITICAL" -gt 0 ]]; then
            echo "::error::Critical vulnerabilities found in ${{ matrix.target }} production image"
            echo "::error::This blocks production deployment. Please address before merging."
            exit 1
          fi
          
          # Warning for high vulnerabilities
          if [[ "$TOTAL_HIGH" -gt 10 ]]; then
            echo "::warning::High number of high-severity vulnerabilities in ${{ matrix.target }}: $TOTAL_HIGH"
          fi
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.target }}-results.sarif'
          category: 'trivy-${{ matrix.target }}'
          
      - name: Upload Grype scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('grype-${{ matrix.target }}-results.sarif') != ''
        with:
          sarif_file: 'grype-${{ matrix.target }}-results.sarif'
          category: 'grype-${{ matrix.target }}'
          
      - name: Run Docker Scout (if available)
        run: |
          if command -v docker >/dev/null 2>&1; then
            docker scout cves sightedit:${{ matrix.target }}-scan \
              --format json \
              --output docker-scout-${{ matrix.target }}.json 2>/dev/null || true
          fi
          
      - name: Upload Docker security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-security-${{ matrix.target }}-reports
          path: |
            trivy-${{ matrix.target }}-results.sarif
            trivy-${{ matrix.target }}-results.json
            grype-${{ matrix.target }}-results.json
            grype-${{ matrix.target }}-results.sarif
            structure-test-${{ matrix.target }}-results.json
            docker-bench-${{ matrix.target }}.log
            docker-scout-${{ matrix.target }}.json
          retention-days: 30

  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
          
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}
        
      - name: Upload GitLeaks report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gitleaks-report
          path: results.sarif
          retention-days: 30

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check licenses
        run: |
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Unlicense' \
            --excludePrivatePackages --json > license-report.json
          
      - name: Generate license report
        run: |
          echo "## License Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          TOTAL_PACKAGES=$(cat license-report.json | jq 'length')
          echo "**Total Packages Scanned**: $TOTAL_PACKAGES" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count licenses
          cat license-report.json | jq -r 'to_entries[] | .value.licenses' | sort | uniq -c | sort -nr | while read count license; do
            echo "- $license: $count packages" >> $GITHUB_STEP_SUMMARY
          done
          
      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report
          path: license-report.json
          retention-days: 30

  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Checkov for Terraform
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-terraform.sarif
          
      - name: Run Checkov for Kubernetes
        uses: bridgecrewio/checkov-action@master
        with:
          directory: k8s/
          framework: kubernetes
          output_format: sarif
          output_file_path: checkov-kubernetes.sarif
          
      - name: Run Checkov for Dockerfile
        uses: bridgecrewio/checkov-action@master
        with:
          file: Dockerfile
          framework: dockerfile
          output_format: sarif
          output_file_path: checkov-dockerfile.sarif
          
      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            checkov-terraform.sarif
            checkov-kubernetes.sarif
            checkov-dockerfile.sarif
            
      - name: Upload infrastructure security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-security-reports
          path: |
            checkov-*.sarif
          retention-days: 30

  security-scorecard:
    name: OpenSSF Security Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          
      - name: Run OpenSSF Scorecard
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true
          
      - name: Upload to code-scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, snyk-security-scan, semgrep-sast, docker-security-scan, secrets-scan, license-compliance, infrastructure-security]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports
          
      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Snyk Security | ${{ needs.snyk-security-scan.result == 'success' && '✅ Passed' || needs.snyk-security-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST (Semgrep) | ${{ needs.semgrep-sast.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Security | ${{ needs.docker-security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Detection | ${{ needs.secrets-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | ${{ needs.license-compliance.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure Security | ${{ needs.infrastructure-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Review security findings in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Download detailed reports from workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "3. Address any high or critical severity issues" >> $GITHUB_STEP_SUMMARY
          echo "4. Update dependencies with known vulnerabilities" >> $GITHUB_STEP_SUMMARY
          
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## 🔒 Security Scan Results
            
            | Scan Type | Status |
            |-----------|--------|
            | Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | Snyk Security | ${{ needs.snyk-security-scan.result == 'success' && '✅ Passed' || needs.snyk-security-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |
            | SAST (Semgrep) | ${{ needs.semgrep-sast.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | Docker Security | ${{ needs.docker-security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | Secret Detection | ${{ needs.secrets-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | License Compliance | ${{ needs.license-compliance.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | Infrastructure Security | ${{ needs.infrastructure-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            
            Please review the Security tab for detailed findings and address any critical or high severity issues before merging.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
            
      - name: Consolidate reports
        run: |
          mkdir -p consolidated-security-reports
          find security-reports -name "*.json" -o -name "*.sarif" | while read file; do
            cp "$file" consolidated-security-reports/$(basename $(dirname "$file"))-$(basename "$file")
          done
          
      - name: Upload consolidated reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: consolidated-security-reports
          path: consolidated-security-reports/
          retention-days: 90