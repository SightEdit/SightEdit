name: Release & Publish

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease-id:
        description: 'Pre-release identifier (alpha, beta, rc)'
        required: false
        default: 'alpha'

env:
  NODE_VERSION: '18'

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Bootstrap packages
        run: npm run bootstrap
        
      - name: Run all tests
        run: npm run test
        
      - name: Run linting
        run: npm run lint
        
      - name: Type checking
        run: npm run typecheck
        
      - name: Build packages
        run: npm run build
        
      - name: Security audit
        run: npm audit --audit-level=moderate

  version-and-release:
    name: Version & Release
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/main'
    
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Bootstrap packages
        run: npm run bootstrap
        
      - name: Build packages
        run: npm run build
        
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Create release (semantic-release)
        id: release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 22
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            @semantic-release/github
            conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Manual version bump (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release-type }}"
          if [ "$RELEASE_TYPE" = "prerelease" ]; then
            npm run version:sync -- --conventional-prerelease --preid=${{ github.event.inputs.prerelease-id }}
          else
            npm run version:sync -- --conventional-$RELEASE_TYPE
          fi
          
      - name: Generate changelog
        if: steps.release.outputs.released == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          npx conventional-changelog-cli -p angular -i CHANGELOG.md -s -r 0
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG.md [skip ci]" || exit 0
          git push

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [version-and-release]
    if: needs.version-and-release.outputs.released == 'true' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        package: [core, react, vue, plugin-markdown, plugin-image-crop]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Bootstrap packages
        run: npm run bootstrap
        
      - name: Build packages
        run: npm run build
        
      - name: Publish package
        run: |
          cd packages/${{ matrix.package }}
          
          # Check if package should be published
          if npm publish --dry-run; then
            # Get package version
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            
            # Check if version already exists on NPM
            if npm view @sightedit/${{ matrix.package }}@$PACKAGE_VERSION version 2>/dev/null; then
              echo "Version $PACKAGE_VERSION already exists on NPM, skipping publish"
            else
              echo "Publishing @sightedit/${{ matrix.package }}@$PACKAGE_VERSION"
              npm publish --access public
            fi
          else
            echo "Package ${{ matrix.package }} not ready for publish"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-docker:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: [version-and-release, publish-npm]
    if: needs.version-and-release.outputs.released == 'true' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
            sightedit/sightedit
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},value=${{ needs.version-and-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.version-and-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.version-and-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.version-and-release.outputs.version }}

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version-and-release, publish-npm, publish-docker]
    if: needs.version-and-release.outputs.released == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Bootstrap packages
        run: npm run bootstrap
        
      - name: Build packages
        run: npm run build
        
      - name: Generate release notes
        id: release-notes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Generate release notes
          if [ -z "$LATEST_TAG" ]; then
            # First release
            git log --pretty=format:"- %s (%h)" > release_notes.md
          else
            # Generate notes since last tag
            git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" > release_notes.md
          fi
          
          # Add package versions to release notes
          echo "" >> release_notes.md
          echo "## Package Versions" >> release_notes.md
          echo "" >> release_notes.md
          
          for pkg in packages/*/package.json; do
            if [ -f "$pkg" ]; then
              PACKAGE_NAME=$(node -p "require('$pkg').name")
              PACKAGE_VERSION=$(node -p "require('$pkg').version")
              echo "- \`$PACKAGE_NAME\`: $PACKAGE_VERSION" >> release_notes.md
            fi
          done
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version-and-release.outputs.tag || format('v{0}', needs.version-and-release.outputs.version) }}
          name: Release ${{ needs.version-and-release.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(needs.version-and-release.outputs.version, '-') }}
          files: |
            packages/*/dist/*.min.js
            packages/*/dist/*.d.ts
            CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [github-release]
    if: success()
    
    steps:
      - name: Notify Slack
        if: vars.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            :rocket: SightEdit ${{ needs.version-and-release.outputs.version }} has been successfully released!
            
            :package: NPM packages published
            :whale: Docker images available
            :octocat: GitHub release created
            
            View release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.version-and-release.outputs.tag }}
        env:
          SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [quality-gates, version-and-release, publish-npm, publish-docker, github-release]
    if: failure()
    
    steps:
      - name: Notify Slack
        if: vars.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            :x: SightEdit release pipeline failed!
            
            Job: ${{ github.job }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            View details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}