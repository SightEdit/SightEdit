# Prometheus Configuration for SightEdit Production Monitoring

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  scrape_timeout: 10s
  external_labels:
    cluster: 'sightedit-production'
    environment: 'production'
    region: 'us-east-1'

# Alerting configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093
      timeout: 10s
      api_version: v2

# Load alerting rules
rule_files:
  - "/etc/prometheus/rules/*.yml"

# Scrape configurations
scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 15s
    metrics_path: /metrics
    
  # Node Exporter (system metrics)
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 15s
    metrics_path: /metrics
    
  # cAdvisor (container metrics)
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 15s
    metrics_path: /metrics
    
  # AlertManager
  - job_name: 'alertmanager'
    static_configs:
      - targets: ['alertmanager:9093']
    scrape_interval: 15s
    metrics_path: /metrics
    
  # SightEdit Backend Service
  - job_name: 'sightedit-backend'
    static_configs:
      - targets: ['sightedit-backend:3001']
    scrape_interval: 10s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '(.+)'
        replacement: '${1}'
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: 'sightedit-backend:3001'
    
  # SightEdit Frontend (if metrics endpoint exists)
  - job_name: 'sightedit-frontend'
    static_configs:
      - targets: ['sightedit-frontend:80']
    scrape_interval: 30s
    metrics_path: /metrics
    honor_labels: true
    
  # Redis
  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']
    scrape_interval: 15s
    metrics_path: /metrics
    
  # OpenTelemetry Collector
  - job_name: 'otel-collector'
    static_configs:
      - targets: ['otel-collector:8889']
    scrape_interval: 15s
    metrics_path: /metrics
    
  # Grafana
  - job_name: 'grafana'
    static_configs:
      - targets: ['grafana:3000']
    scrape_interval: 30s
    metrics_path: /metrics
    
  # Loki
  - job_name: 'loki'
    static_configs:
      - targets: ['loki:3100']
    scrape_interval: 15s
    metrics_path: /metrics
    
  # Jaeger
  - job_name: 'jaeger'
    static_configs:
      - targets: ['jaeger:14269']
    scrape_interval: 15s
    metrics_path: /metrics
    
  # Elasticsearch
  - job_name: 'elasticsearch'
    static_configs:
      - targets: ['elasticsearch:9200']
    scrape_interval: 30s
    metrics_path: /_prometheus/metrics
    
  # Uptime Kuma
  - job_name: 'uptime-kuma'
    static_configs:
      - targets: ['uptime-kuma:3001']
    scrape_interval: 30s
    metrics_path: /metrics
    
  # Webhook Server
  - job_name: 'webhook-server'
    static_configs:
      - targets: ['webhook-server:8080']
    scrape_interval: 30s
    metrics_path: /metrics
    
  # Business Logic Metrics (custom metrics from application)
  - job_name: 'sightedit-business-metrics'
    static_configs:
      - targets: ['sightedit-backend:3001']
    scrape_interval: 30s
    metrics_path: /business-metrics
    scrape_timeout: 30s
    honor_labels: true
    
  # Security Metrics
  - job_name: 'sightedit-security-metrics'
    static_configs:
      - targets: ['sightedit-backend:3001']
    scrape_interval: 60s
    metrics_path: /security-metrics
    scrape_timeout: 30s
    
  # Database Metrics (if using PostgreSQL/MySQL with exporters)
  - job_name: 'postgres-exporter'
    static_configs:
      - targets: ['postgres-exporter:9187']
    scrape_interval: 15s
    metrics_path: /metrics
    
  # External service monitoring (third-party APIs)
  - job_name: 'blackbox-exporter'
    static_configs:
      - targets:
        - https://api.sightedit.com/health
        - https://cdn.sightedit.com/status
    metrics_path: /probe
    params:
      module: [http_2xx]
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: 'blackbox-exporter:9115'
    scrape_interval: 30s
    
  # File-based service discovery for dynamic targets
  - job_name: 'file-sd-sightedit'
    file_sd_configs:
      - files:
        - '/etc/prometheus/file_sd/*.yml'
        refresh_interval: 30s
    relabel_configs:
      - source_labels: [__meta_filepath]
        target_label: file_source

# Storage configuration
storage:
  tsdb:
    retention:
      time: 30d
      size: 45GB
    min_block_duration: 2h
    max_block_duration: 25h
    
# Remote write configuration (for long-term storage)
remote_write:
  - url: "https://prometheus-us-central1.grafana.net/api/prom/push"
    basic_auth:
      username: "YOUR_GRAFANA_CLOUD_USERNAME"
      password: "YOUR_GRAFANA_CLOUD_API_KEY"
    write_relabel_configs:
      - source_labels: [__name__]
        regex: 'sightedit_.*|http_.*|up'
        action: keep
    queue_config:
      max_samples_per_send: 1000
      max_shards: 200
      capacity: 2500
      batch_send_deadline: 5s

# Remote read configuration (if needed)
remote_read:
  - url: "https://prometheus-us-central1.grafana.net/api/prom/read"
    basic_auth:
      username: "YOUR_GRAFANA_CLOUD_USERNAME"
      password: "YOUR_GRAFANA_CLOUD_API_KEY"
    read_recent: true
    
# Tracing configuration
tracing:
  endpoint: "jaeger:14268/api/traces"
  headers:
    "X-Custom-Header": "custom-value"
  
# Feature flags
feature_flags:
  enable-auto-gomaxprocs: true
  memory-snapshot-on-shutdown: true