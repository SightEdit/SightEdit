apiVersion: v1
kind: Secret
metadata:
  name: sightedit-secrets
  namespace: sightedit
  labels:
    app.kubernetes.io/name: sightedit
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Note: These are base64 encoded placeholder values
  # In production, these should be managed by external secret management systems
  # like AWS Secrets Manager, HashiCorp Vault, or Kubernetes External Secrets
  
  # Database credentials (base64 encoded)
  # Example: echo -n "your-database-password" | base64
  DATABASE_PASSWORD: cGxhY2Vob2xkZXItcGFzc3dvcmQ=  # placeholder-password
  
  # JWT secret for authentication (base64 encoded)
  JWT_SECRET: eW91ci1qd3Qtc2VjcmV0LWtleS1oZXJl  # your-jwt-secret-key-here
  
  # Redis password (if authentication enabled)
  REDIS_PASSWORD: cmVkaXMtcGFzc3dvcmQ=  # redis-password
  
  # Encryption key for sensitive data
  ENCRYPTION_KEY: ZW5jcnlwdGlvbi1rZXktMzItY2hhcnM=  # encryption-key-32-chars
  
  # OAuth/OIDC client secrets (if using external authentication)
  OAUTH_CLIENT_SECRET: b2F1dGgtY2xpZW50LXNlY3JldA==  # oauth-client-secret
  
  # External service API keys
  SENTRY_DSN: c2VudHJ5LWRzbi11cmw=  # sentry-dsn-url
  ANALYTICS_API_KEY: YW5hbHl0aWNzLWFwaS1rZXk=  # analytics-api-key

---
# Database connection secret
apiVersion: v1
kind: Secret
metadata:
  name: database-connection
  namespace: sightedit
  labels:
    app.kubernetes.io/name: sightedit
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: database
type: Opaque
stringData:
  # Database connection URL (will be base64 encoded automatically)
  # This should be dynamically generated or injected from external systems
  DATABASE_URL: "postgresql://sightedit:placeholder-password@postgres-service:5432/sightedit"

---
# Redis connection secret
apiVersion: v1
kind: Secret
metadata:
  name: redis-connection
  namespace: sightedit
  labels:
    app.kubernetes.io/name: sightedit
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: cache
type: Opaque
stringData:
  # Redis connection URL
  REDIS_URL: "redis://redis-service:6379"

---
# TLS certificate secret (for ingress)
# This would typically be managed by cert-manager
apiVersion: v1
kind: Secret
metadata:
  name: sightedit-tls
  namespace: sightedit
  labels:
    app.kubernetes.io/name: sightedit
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: tls
  annotations:
    cert-manager.io/issuer: "letsencrypt-prod"
type: kubernetes.io/tls
data:
  # These would be populated by cert-manager
  tls.crt: LS0tLS1CRUdJTi... # base64 encoded certificate
  tls.key: LS0tLS1CRUdJTi... # base64 encoded private key