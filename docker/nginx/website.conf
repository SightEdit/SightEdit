# ================================================================================
# Nginx Configuration for SightEdit Website
# Optimized for security, performance, and health monitoring
# ================================================================================

# Security headers for website
map $sent_http_content_type $csp_policy {
    default "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.jsdelivr.net; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' wss: ws:; object-src 'none'; base-uri 'self'; form-action 'self';";
    "text/html" "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.jsdelivr.net; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' wss: ws:; object-src 'none'; base-uri 'self'; form-action 'self'; upgrade-insecure-requests;";
}

# Rate limiting
limit_req_zone $binary_remote_addr zone=website:10m rate=30r/m;
limit_req_zone $binary_remote_addr zone=api:10m rate=60r/m;

server {
    listen 8080;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    # Security configuration
    server_tokens off;
    more_clear_headers Server;

    # Security headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy $csp_policy always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Health check endpoints
    location /health {
        access_log off;
        return 200 '{"status":"healthy","service":"website","timestamp":"$time_iso8601"}';
        add_header Content-Type application/json;
    }

    location /health/detailed {
        access_log off;
        content_by_lua_block {
            local health_data = {
                status = "healthy",
                service = "website",
                timestamp = ngx.utctime(),
                checks = {
                    nginx = "running",
                    static_files = "accessible",
                    memory = "ok"
                },
                version = "1.0.0"
            }
            ngx.header.content_type = "application/json"
            ngx.say(require("cjson").encode(health_data))
        }
    }

    # Readiness probe
    location /ready {
        access_log off;
        return 200 'ready';
        add_header Content-Type text/plain;
    }

    # Liveness probe
    location /live {
        access_log off;
        return 200 'alive';
        add_header Content-Type text/plain;
    }

    # Main website content
    location / {
        limit_req zone=website burst=10 nodelay;
        try_files $uri $uri/ /index.html;
        
        # Cache HTML files for a short time
        location ~* \.html$ {
            expires 5m;
            add_header Cache-Control "public, must-revalidate";
            etag on;
        }
    }

    # Static assets with long-term caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        etag off;
        
        # Precompressed files
        gzip_static on;
        brotli_static on;
        
        # Security for font files
        location ~* \.(woff|woff2|ttf|eot)$ {
            add_header Access-Control-Allow-Origin "*";
        }
    }

    # API endpoints (if website needs backend functionality)
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        
        # CORS handling
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin '*';
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
            add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }
        
        # Proxy to backend if needed
        proxy_pass http://backend-service:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Documentation and examples
    location /examples/ {
        limit_req zone=website burst=5 nodelay;
        try_files $uri $uri/ =404;
        
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
        }
    }

    # Security: Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ /(\.git|\.env|config|src|node_modules|package\.json|webpack\.config\.js) {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Security: Block common exploit attempts
    location ~* \.(php|asp|aspx|jsp|cgi|pl)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Security: Block user agent scanners
    if ($http_user_agent ~* (nmap|nikto|wikto|sf|sqlmap|bsqlbf|w3af|acunetix|havij|appscan)) {
        return 444;
    }

    # Rate limiting for specific endpoints
    location = /favicon.ico {
        limit_req zone=website burst=5 nodelay;
        expires 30d;
        add_header Cache-Control "public, immutable";
        access_log off;
        log_not_found off;
    }

    location = /robots.txt {
        limit_req zone=website burst=1 nodelay;
        expires 1d;
        add_header Cache-Control "public";
        access_log off;
    }

    location = /sitemap.xml {
        limit_req zone=website burst=1 nodelay;
        expires 1d;
        add_header Cache-Control "public";
        access_log off;
    }

    # Custom error pages
    error_page 400 401 403 404 /error/4xx.html;
    error_page 500 502 503 504 /error/5xx.html;
    
    location ^~ /error/ {
        internal;
        root /usr/share/nginx/html;
    }

    # Monitoring and metrics endpoint (restricted)
    location /metrics {
        access_log off;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        content_by_lua_block {
            local metrics = {
                "# HELP nginx_requests_total Total number of requests",
                "# TYPE nginx_requests_total counter",
                "nginx_requests_total " .. ngx.var.connections_handled,
                "",
                "# HELP nginx_active_connections Active connections",
                "# TYPE nginx_active_connections gauge", 
                "nginx_active_connections " .. ngx.var.connections_active
            }
            ngx.header.content_type = "text/plain"
            ngx.say(table.concat(metrics, "\n"))
        }
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml;

    # Brotli compression (if module available)
    brotli on;
    brotli_comp_level 6;
    brotli_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml;
}